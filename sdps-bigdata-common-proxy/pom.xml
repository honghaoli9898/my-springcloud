<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>sdps-framework</artifactId>
		<groupId>com.seaboxdata.sdps.framework</groupId>
		<version>1.0.0</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>sdps-bigdata-common-proxy</artifactId>

	<properties>
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>8</maven.compiler.target>

		<eclipselink.version>2.6.2</eclipselink.version>
		<jackson-mapper-asl>1.9.13</jackson-mapper-asl>
	</properties>
	<dependencies>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>ribbon-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>redis-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>db-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>log-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>common-utils</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>common-framework</artifactId>
		</dependency>
		<dependency>
			<groupId>com.seaboxdata.sdps.framework</groupId>
			<artifactId>config-common</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!-- <scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
		</dependency>

		<!-- 集群管理使用 -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson-mapper-asl}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>${eclipselink.version}</version>
		</dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
			<version>2.8.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
        </dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
		</dependency>
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
            <scope>compile</scope>
        </dependency>
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.1</version>
		</dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-assistedinject</artifactId>
            <version>3.0</version>
            <scope>compile</scope>
        </dependency>
		<dependency>
			<groupId>javax.websocket</groupId>
			<artifactId>javax.websocket-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>8.0.1</version>
			<scope>provided</scope>
		</dependency>

    </dependencies>
	<build>
		<finalName>bigdata-common-proxy</finalName>
		<plugins>
			<!--打包jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<!--不打包资源文件 -->
					<excludes>
						<exclude>**/*.sh</exclude>
						<exclude>**/*.xsl</exclude>
						<exclude>*/*.xml</exclude>
						<exclude>*.**</exclude>
					</excludes>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<!--MANIFEST.MF 中 Class-Path 加入前缀 -->
							<classpathPrefix>lib/</classpathPrefix>
							<!--jar包不包含唯一版本标识 -->
							<useUniqueVersions>false</useUniqueVersions>
							<!--指定入口类 -->
							<mainClass>com.seaboxdata.sdps.bigdataProxy.SdpsBigdataCommonProxyApplication</mainClass>
						</manifest>
						<manifestEntries>
							<!--MANIFEST.MF 中 Class-Path 加入资源文件目录 -->
							<Class-Path>./resources/</Class-Path>
						</manifestEntries>
					</archive>
					<outputDirectory>${project.build.directory}</outputDirectory>

				</configuration>
			</plugin>

			<!--拷贝依赖 copy-dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>
								${project.build.directory}/lib/
							</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--拷贝资源文件 copy-resources -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
								</resource>
							</resources>
							<!-- <outputDirectory>${project.build.directory}/resources,src/main/java/com/tansun/batch/bus/**/mapper</outputDirectory> -->
							<outputDirectory>${project.build.directory}/resources</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--spring boot repackage，依赖 maven-jar-plugin 打包的jar包 重新打包成 spring boot 
				的jar包 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!--重写包含依赖，包含不存在的依赖，jar里没有pom里的依赖 -->
					<includes>
						<include>
							<groupId>null</groupId>
							<artifactId>null</artifactId>
						</include>
					</includes>
					<layout>ZIP</layout>
					<!--使用外部配置文件，jar包里没有资源文件 -->
					<addResources>true</addResources>
					<outputDirectory>${project.build.directory}</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!--配置jar包特殊标识 配置后，保留原文件，生成新文件 *-run.jar -->
							<!--配置jar包特殊标识 不配置，原文件命名为 *.jar.original，生成新文件 *.jar -->
							<!--<classifier>run</classifier> -->
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--拷贝编译后的jar包及lib,resource到项目部署目录-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>addJarDeployDir</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<delete dir="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server/lib"/>
								<delete dir="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server/resources"/>
								<delete file="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server/${project.build.finalName}.jar"/>
								<echo message="${project.build.directory}/${project.build.finalName}.jar"/>
								<copy file="${project.build.directory}/${project.build.finalName}.jar" todir="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server" overwrite="true"/>
								<copy todir="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server/resources" overwrite="true">
									<fileset dir="${project.build.directory}/resources"/>
								</copy>
								<copy todir="../deploy/部署SDPS服务目录及启动脚本/sdp7/bigdataCommon-proxy-server/lib" overwrite="true">
									<fileset dir="${project.build.directory}/lib"/>
								</copy>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>